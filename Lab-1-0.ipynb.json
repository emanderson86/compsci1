{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# Introduction to Python: Printing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most basic output we can get from Python is text.  To print text, use the print command (with parentheses following, and what you would like to print in quotes).  Try running the following cell, then write a new print line to print anything you want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n"
     ]
    }
   ],
   "source": [
    "print(\"Hello\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the following lines:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(\"Hello World\");\n",
    "print(\"Hello\", \"World\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "What is the difference between these two outputs?  (Write an answer below)  Can you add a third or fourth word separated by a comma? Try it!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Run the following lines:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(\"Hello\",    \"World\");\n",
    "print(\"Hello   \",\"World\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When does the extra space make a difference in the output?  Why do you suppose this is the case?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A syntax error occurs when you give an instruction that Python cannot understand.  Python is case-sensitive and does not forgive typos.  You will make A LOT of syntax errors.  When it happens, the console is kind enough to notify you with an error message.    The error message gives the name of the file/program where the error occurred, the line number where the issue exists, and it even gives some information about the nature of the error.  Sometimes you won’t understand the description of the error, but you should always take the time to read it.\n",
    "\n",
    "Run the following flawed lines of code.  Remember to comment out (put a # at the beginning of the line) each previous line before typing and running the next!  After you run each line, explain the error and study the resulting error message to see that you understand it. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Print(\"Hi\");\n",
    "#print(Hi);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Explain the errors here:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In previous lines you have supplied one, two, or three different “things”, separated by commas, as inputs into the print function.  The “things” are called **strings**, which is the programming word for a sequence of characters.  Quotes are needed to specify the beginning and end of each string.  In general, each input into a function is called an **argument.**\n",
    "\n",
    "Run the following lines and describe what the print function does when it is not given any string arguments.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(\"Hello\");\n",
    "print();\n",
    "print();\n",
    "print(\"Hello\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Describe here:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The print function also accepts keyword arguments, which are special inputs that you can use to control some of the behavior of the print function.  Run the following lines of code, then play with them and try to describe what sep = [string] and end = [string] do to when they are arguments in the print function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(\"I\",\"love\",\"coding!\", sep = \"+\");\n",
    "print(\"Two\",\"four\",\"six\",\"eight\",sep = \", \", end = \"; \");\n",
    "print(\"who do we appreciate?\");\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Describe here: "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Experiment, search the python documentation, or search the web to...\n",
    "a.\tfigure out what the control characters \\n and \\t do.\n",
    "b.\tUse the print function to output:  You say “Goodbye” and I say “Hello”.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Write your code here"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
